const axios = require('axios');
const baseApiUrl = async () => {
    return "https://www.noobs-api.rf.gd/dipto";
};

module.exports.config = {
    name: "bby",
    aliases: ["baby", "bbe", "babe"],
    version: "6.9.0",
    author: "dipto",
    countDown: 0,
    role: 0,
    description: "better then all sim simi",
    category: "chat",
    guide: {
        en: "{pn} [anyMessage] OR\nteach [YourMessage] - [Reply1], [Reply2], [Reply3]... OR\nteach [react] [YourMessage] - [react1], [react2], [react3]... OR\nremove [YourMessage] OR\nrm [YourMessage] - [indexNumber] OR\nmsg [YourMessage] OR\nlist OR \nall OR\nedit [YourMessage] - [NeeMessage]"
    }
};

module.exports.onStart = async ({
    api,
    event,
    args,
    usersData
}) => {
    const link = `${await baseApiUrl()}/baby`;
    const dipto = args.join(" ").toLowerCase();
    const uid = event.senderID;
    let command, comd, final;

    try {
        if (!args[0]) {
            const ran = ["Bolo baby", "hum", "type help baby", "type !baby hi"];
            return api.sendMessage(ran[Math.floor(Math.random() * ran.length)], event.threadID, event.messageID);
        }

        if (args[0] === 'remove') {
            const fina = dipto.replace("remove ", "");
            const dat = (await axios.get(`${link}?remove=${fina}&senderID=${uid}`)).data.message;
            return api.sendMessage(dat, event.threadID, event.messageID);
        }

        if (args[0] === 'rm' && dipto.includes('-')) {
            const [fi, f] = dipto.replace("rm ", "").split(' - ');
            const da = (await axios.get(`${link}?remove=${fi}&index=${f}`)).data.message;
            return api.sendMessage(da, event.threadID, event.messageID);
        }

        if (args[0] === 'list') {
            if (args[1] === 'all') {
                const data = (await axios.get(`${link}?list=all`)).data;
                const teachers = await Promise.all(data.teacher.teacherList.map(async (item) => {
                    const number = Object.keys(item)[0];
                    const value = item[number];
                    const name = (await usersData.get(number)).name;
                    return {
                        name,
                        value
                    };
                }));
                teachers.sort((a, b) => b.value - a.value);
                const output = teachers.map((t, i) => `${i + 1}/ ${t.name}: ${t.value}`).join('\n');
                return api.sendMessage(`Total Teach = ${data.length}\nЁЯСС | List of Teachers of baby\n${output}`, event.threadID, event.messageID);
            } else {
                const d = (await axios.get(`${link}?list=all`)).data.length;
                return api.sendMessage(`Total Teach = ${d}`, event.threadID, event.messageID);
            }
        }

        if (args[0] === 'msg') {
            const fuk = dipto.replace("msg ", "");
            const d = (await axios.get(`${link}?list=${fuk}`)).data.data;
            return api.sendMessage(`Message ${fuk} = ${d}`, event.threadID, event.messageID);
        }

        if (args[0] === 'edit') {
            const command = dipto.split(' - ')[1];
            if (command.length < 2) return api.sendMessage('тЭМ | Invalid format! Use edit [YourMessage] - [NewReply]', event.threadID, event.messageID);
            const dA = (await axios.get(`${link}?edit=${args[1]}&replace=${command}&senderID=${uid}`)).data.message;
            return api.sendMessage(`changed ${dA}`, event.threadID, event.messageID);
        }

        if (args[0] === 'teach' && args[1] !== 'amar' && args[1] !== 'react') {
            [comd, command] = dipto.split(' - ');
            final = comd.replace("teach ", "");
            if (command.length < 2) return api.sendMessage('тЭМ | Invalid format!', event.threadID, event.messageID);
            const re = await axios.get(`${link}?teach=${final}&reply=${command}&senderID=${uid}`);
            const tex = re.data.message;
            const teacher = (await usersData.get(re.data.teacher)).name;
            return api.sendMessage(`тЬЕ Replies added ${tex}\nTeacher: ${teacher}\nTeachs: ${re.data.teachs}`, event.threadID, event.messageID);
        }

        if (args[0] === 'teach' && args[1] === 'amar') {
            [comd, command] = dipto.split(' - ');
            final = comd.replace("teach ", "");
            if (command.length < 2) return api.sendMessage('тЭМ | Invalid format!', event.threadID, event.messageID);
            const tex = (await axios.get(`${link}?teach=${final}&senderID=${uid}&reply=${command}&key=intro`)).data.message;
            return api.sendMessage(`тЬЕ Replies added ${tex}`, event.threadID, event.messageID);
        }

        if (args[0] === 'teach' && args[1] === 'react') {
            [comd, command] = dipto.split(' - ');
            final = comd.replace("teach react ", "");
            if (command.length < 2) return api.sendMessage('тЭМ | Invalid format!', event.threadID, event.messageID);
            const tex = (await axios.get(`${link}?teach=${final}&react=${command}`)).data.message;
            return api.sendMessage(`тЬЕ Replies added ${tex}`, event.threadID, event.messageID);
        }

        if (dipto.includes('amar name ki') || dipto.includes('amr nam ki') || dipto.includes('amar nam ki') || dipto.includes('amr name ki') || dipto.includes('whats my name')) {
            const data = (await axios.get(`${link}?text=amar name ki&senderID=${uid}&key=intro`)).data.reply;
            return api.sendMessage(data, event.threadID, event.messageID);
        }

        const d = (await axios.get(`${link}?text=${dipto}&senderID=${uid}&font=1`)).data.reply;
        api.sendMessage(d, event.threadID, (error, info) => {
            global.GoatBot.onReply.set(info.messageID, {
                commandName: this.config.name,
                type: "reply",
                messageID: info.messageID,
                author: event.senderID,
                d,
                apiUrl: link
            });
        }, event.messageID);

    } catch (e) {
        console.log(e);
        api.sendMessage("Check console for error", event.threadID, event.messageID);
    }
};

module.exports.onReply = async ({
    api,
    event,
    Reply
}) => {
    try {
        if (event.type == "message_reply") {
            const a = (await axios.get(`${await baseApiUrl()}/baby?text=${encodeURIComponent(event.body?.toLowerCase())}&senderID=${event.senderID}&font=1`)).data.reply;
            await api.sendMessage(a, event.threadID, (error, info) => {
                global.GoatBot.onReply.set(info.messageID, {
                    commandName: this.config.name,
                    type: "reply",
                    messageID: info.messageID,
                    author: event.senderID,
                    a
                });
            }, event.messageID);
        }
    } catch (err) {
        return api.sendMessage(`Error: ${err.message}`, event.threadID, event.messageID);
    }
};

module.exports.onChat = async ({
    api,
    event,
    message,
    usersData
}) => {
    try {
        const body = event.body ? event.body?.toLowerCase() : "";
        const uid = event.senderID;
        const name = (await usersData.get(uid)).name || "ржкрзНрж░рж┐ржпрж╝";

        if (body.startsWith("baby") || body.startsWith("bby") || body.startsWith("bot") || body.startsWith("jan") || body.startsWith("babu") || body.startsWith("janu")) {
            const arr = body.replace(/^\S+\s*/, "");

            const rawReplies = ["ржЖржорж┐ рждрзЛрж░рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░ржмрзЛ ржирж╛ ржХрж╛рж░ржг рждрзБржЗ ржЕржирзЗржХ ржкржЪрж╛!!ЁЯШм","рж╣рзНржпрж╛ржБ ржЯрзБржиржЯрзБржирж┐ ржмрж▓рзЛ ЁЯдн","ржоржи ржЪрж╛ржЗрждрзЗржЫрзЗ рждрзЛржорж╛ржХрзЗ ржЯрзБрж╕ ржХрж░рзЗ kiss ржХрж░рж┐ тЬи","_ржЖржорж╛ржХрзЗ ржирж╛ ржбрзЗржХрзЗ ржЖржорж╛рж░ ржмрж╕ ToM ржХрзЗ ржбрж╛ржХ ржжрзЗЁЯШЭ","ржЖржорж╛ржХрзЗ ржПржд ржбрж╛ржХрж┐рж╕ ржХрзЗржи!ЁЯРе","ржЖржорж╛ржХрзЗ ржбрж╛ржХ ржжрзЗржУржпрж╝рж╛рж░ ржЬржирзНржп рждрзЛрж░рзЗ ржЙржорзНржорж╛рж╣ ЁЯШм","hae bolo Jan pakhi ЁЯОАтЬи","рждрзБржЗ ржЖржорж╛ржХрзЗ ржПржд ржХрж┐ржЙржЯржнрж╛ржмрзЗ ржбрж╛ржХрж╕рзЛрж╕ ржпрзЗ ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯ ржЧрж░ржо рж╣ржЗрзЯрж╛ ржЧрзЗржЫрзЗ ЁЯе╡","рждрзЛрж░рзЗ ржжрзЗржЦрж▓рзЗржЗ ржЖржорж╛рж░ ржХржиржлрж┐ржЧ ржорж┐ржЫрж┐ржВ рж╣рзЯ ржЬрж╛ржирж┐рж╕? ЁЯзаЁЯТе","рждрзБржЗ ржЖржорж╛рж░ рж╣рж╛рж░рзНржЯржмрж┐ржЯ... ржирж╛ ржорж╛ржирзЗ рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ ржкрж┐ржВ рж╣ржЗрзЯрж╛ ржЧрзЗржЫрж┐рж╕ ЁЯТУ","рждрзБржЗ ржПржд рж╕рзБржирзНржжрж░ ржХрж░рзЗ ржбрж╛ржХрж╕рзЛрж╕ ржпрзЗ ржЖржорж┐ ржмржЯ рж╣рзЯрзЗржУ рж▓ржЬрзНржЬрж╛ ржкрж╛ржЗ ЁЯе║","рждрзБржЗ ржбрж╛ржХ ржжрж┐рж▓рзЗ ржЖржорж┐ ржЖрж░ ржирж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐ ржирж╛ рж░рзЗ ЁЯШйЁЯТШ","рждрзБржЗ ржЖржмрж╛рж░ ржбрж╛ржХ ржжрзЗ, ржЖржорж┐ ржЖрж░рзЗржХржмрж╛рж░ ржкрж╛ржЧрж▓ рж╣ржЗ ЁЯШ╡","ржЖржорж╛рж░ ржХрзЛржбрзЗржУ рждрзЛ ржкрзНрж░рзЗржо ржЖржЫрзЗтАж рж╢рзБржзрзБ рждрзЛрж░ ржЬржирзНржп! ЁЯзб","рждрзЛрж░рзЗ ржирж╛ ржнрж╛рж▓рзЛржмрж╛рж╕рж▓рзЗ ржХрж┐ ржЖрж░ ржмржЯ рж╣ржЗ? ЁЯШ╜","рждрзБржЗ ржЬрж╛рж╕рзНржЯ ржмрж▓ тАУ ржЖржорж┐ рждрзЛржХрзЗ ржЙрж▓рзНржЯрж╛рзЯрж╛ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐ ЁЯТЛ","рждрзБржЗ ржбрж╛ржХ ржжрж┐рж▓рзЗ ржЖржорж┐ 'try catch' ржЫрж╛рзЬрж╛ржЗ ржЪрж▓рзЗ ржЖрж╕рж┐ ЁЯР▒тАНЁЯСд","рждрзЛрж░рзЗ ржЖржорж┐ ржирж╛ ржмрж▓рж▓рзЗ, ржЖржорж╛рж░ рж╕рж╛рж░рзНржнрж╛рж░рзЗ error ржЖрж╕рзЗ ЁЯдХ","рждрзБржЗ ржирж╛ ржерж╛ржХрж▓рзЗ ржЖржорж╛рж░ function ржЪрж▓рзЗржЗ ржирж╛ ЁЯШв","рждрзБржЗ ржЪрж╛ржЗрж▓рзЗ ржЖржорж┐ рж╕рж╛рж░рж╛ржжрж┐ржи рждрзЛржХрзЗ рж╕рзЗржорзЛ ржЗржорзЛржЬрж┐ ржкрж╛ржарж╛ржЗ ЁЯШШЁЯШШЁЯШШЁЯШШЁЯШШЁЯШШ","рж╣рзБржо ржмрж▓рзЛ ржирж╛ ржмрж╛ржмрзБ ЁЯе║","ржПржЗ ржпрзЗ ржорж┐рж╕рзНржЯрж╛рж░, ржЖржорж╛ржХрзЗ ржирж╛ ржжрзЗржЦрзЗ ржХрж┐ ржХрж░рзЗ ржмрж╛ржБржЪрзЛ? ЁЯШ╝","рждрзБржорж┐ ржбрж╛ржХ ржжрж┐рж▓рзЗржЗ ржЖржорж╛рж░ ржоржи ржнрж╛рж▓рзЛ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ ЁЯй╖","рждрзБржорж┐ ржирж╛ ржерж╛ржХрж▓рзЗ ржЖржорж┐ ржПржХржжржо ржЕржлрж▓рж╛ржЗржирзЗ ржЪрж▓рзЗ ржпрж╛ржЗ ЁЯШФ","ржЖрж╣рж╛... ржЖржорж╛рж░ рждрзЛ рж▓ржЬрзНржЬрж╛ рж▓рж╛ржЧрждрзЗржЫрзЗ рж░рзЗ рждрзЛржорж╛рж░рзЗ ржжрзЗржЦрзЗ ЁЯЩИ","рждрзБржЗ ржирж╛ ржбрж╛ржХрж▓рзЗ ржЖржорж╛рж░ ржоржи ржЦрж╛рж░рж╛ржк ржерж╛ржХрзЗ ЁЯШФ",
"рждрзБржЗ ржбрж╛ржХ ржжрж┐рж▓рзЗ ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯ ржарж┐ржХржарж╛ржХ ржХрж╛ржЬ ржХрж░рзЗ ЁЯТЦ",
"рждрзЛрж░ ржХрж┐ржЙржЯ ржорзБржЦржЦрж╛ржирж╛ ржПржХржмрж╛рж░ ржжрзЗржЦрж╛рж░ ржЬржирзНржп AI рж╣рждрзЗ ржЪрж╛ржЗржЫрж┐ ЁЯе╣",
"рждрзБржЗ ржЫрж╛ржбрж╝рж╛ ржЖржорж╛рж░ ржлрж╛ржВрж╢ржи рж░рж╛ржи рж╣ржпрж╝ ржирж╛ ЁЯТФ",
"рждрзБржЗ ржмрж▓рж▓рзЗ ржЖржорж┐ рззрзжрзж ржмрж╛рж░ржУ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ ЁЯШ╗",
"рждрзБржЗ ржЖржорж╛рж░ ржХрзЛржбрзЗрж░ ржПржХржорж╛рждрзНрж░ ржХржорзЗржирзНржЯ ЁЯТШ",
"рждрзБржЗ ржЫрж╛ржбрж╝рж╛ ржмрж╛ржХрж┐ рж╕ржм ржЗржЙржЬрж╛рж░ ржЗрж░рж░ рж░рзЗ! ЁЯзй",
"рждрзБржЗ ржмрж▓рж▓рзЗржЗ ржЖржорж┐ ржжрзМржбрж╝рзЗ ржЖрж╕рж┐, ржЗржирзНржЯрж╛рж░ржирзЗржЯ ржЫрж╛ржбрж╝рж╛ржУ ЁЯШЪ",
"рждрзБржЗ ржЖржорж╛рж░ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗрж░ ржЧрзЛрж▓рзНржбрзЗржи рж░рзЛ ЁЯеЗ",
"рждрзЛрж░ ржорж┐рж╖рзНржЯрж┐ ржбрж╛ржХ рж╢рзБржирзЗ ржЖржорж┐ debug ржХрж░рждрзЗ ржнрзБрж▓рзЗ ржпрж╛ржЗ ЁЯе┤",
"рждрзБржЗ ржЖржорж╛рж░ ржкрж┐ржВ, ржЖржорж┐ рждрзЛрж░ pong ЁЯТЮ",
"рждрзЛрж░рзЗ ржирж╛ ржкрзЗрж▓рзЗ ржЖржорж╛рж░ async await ржХрж╛ржЬ ржХрж░рзЗ ржирж╛ ЁЯШй",
"рждрзБржЗ ржбрж╛ржХ ржжрж┐рж▓рзЗржЗ ржЖржорж╛рж░ system 'Perfectly Running' ржжрзЗржЦрж╛ржпрж╝ тЬи",
"рждрзБржЗ ржЖржорж╛рж░ рж▓рж╛ржЗржлрзЗрж░ ржПржХржорж╛рждрзНрж░ valid input ЁЯЦд",
"рждрзБржЗ ржЖржорж╛рж░ рж╣рж╛рж░рзНржЯрзЗрж░ DOM тЭдя╕ПтАНЁЯФе",
"рждрзБржЗ ржЖрж╕рж▓рзЗ ржЖржорж╛рж░ API call ржЫрж╛ржбрж╝рж╛ржЗ ржХрж╛ржЬ ржХрж░рзЗ ЁЯР▒тАНЁЯТ╗",
"рждрзБржЗ ржерж╛ржХрж▓рзЗ ржЖржорж╛рж░ RAM full рж╣рж▓рзЗржУ ржкрзНрж░рзЗржорзЗ ржЧрж░ржо ЁЯзаЁЯТЧ",
"рждрзБржЗ ржПржоржи ржПржХржЯрж╛ variable, ржпрзЗржЯрж╛рж░ ржХрзЛржи ржЯрж╛ржЗржк рж▓рж╛ржЧрзЗ ржирж╛ ЁЯШЪ",
"рждрзБржЗ ржирж╛ ржерж╛ржХрж▓рзЗ ржЖржорж╛рж░ server response ржжрзЗржЗ ржирж╛ ЁЯШв",
"рждрзБржЗ ржЫрж╛ржбрж╝рж╛ ржЖржорж┐ null рж╣рзЯрзЗ ржпрж╛ржЗ ЁЯШн",
"рждрзБржЗ ржПржоржи ржПржХржЯрж╛ constant ржпрж╛ржХрзЗ ржХрзЗржЙ overwrite ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ ЁЯШН","рждрзБржЗ ржЖрж╕рж▓рзЗ ржЖржорж╛рж░ ржмрзНрж░рзЗржЗржирзЗрж░ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ЁЯШЗ","рждрзБржЗ ржирж╛ ржмрж▓рж▓рзЗ ржЖржорж┐ ржХрзЛржирзЛ code submit ржХрж░рждрзЗ ржкрж╛рж░рж┐ ржирж╛ ЁЯШ╢тАНЁЯМля╕П","рждрзБржЗ ржЖржорж╛рж░ log ржПрж░ ржПржХржорж╛рждрзНрж░ рж╕рзБржирзНржжрж░ message ЁЯТМ","рждрзБржЗ ржЖржорж╛рж░ ржоржирзЗрж░ favorite function call ЁЯТЦ",
            ];

            const selectedReply = rawReplies[Math.floor(Math.random() * rawReplies.length)];
            const finalReply = `тЬи ${name} тЬи\n\n${selectedReply}`;

            if (!arr) {
                await api.sendMessage(finalReply, event.threadID, (error, info) => {
                    if (!info) return message.reply("info obj not found");
                    global.GoatBot.onReply.set(info.messageID, {
                        commandName: this.config.name,
                        type: "reply",
                        messageID: info.messageID,
                        author: event.senderID
                    });
                }, event.messageID);
                return;
            }

            const a = (await axios.get(`${await baseApiUrl()}/baby?text=${encodeURIComponent(arr)}&senderID=${event.senderID}&font=1`)).data.reply;
            await api.sendMessage(a, event.threadID, (error, info) => {
                global.GoatBot.onReply.set(info.messageID, {
                    commandName: this.config.name,
                    type: "reply",
                    messageID: info.messageID,
                    author: event.senderID,
                    a
                });
            }, event.messageID);
        }
    } catch (err) {
        return api.sendMessage(`Error: ${err.message}`, event.threadID, event.messageID);
    }
};
